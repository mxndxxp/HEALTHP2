'use client';
import { useState } from 'react';
import { SidebarNav } from '@/components/layout/sidebar-nav';
import { Header } from '@/components/layout/header';
import { PatientInformation } from '@/components/patient-information';
import { MedicalHistory } from '@/components/medical-history';
import { LifestyleAssessment } from '@/components/lifestyle-assessment';
import { SenseOrgans } from '@/components/sense-organs';
import { Dashboard } from '@/components/dashboard';
import { AiAnalysis } from '@/components/ai-analysis';
import { ChatBot } from '@/components/chat-bot';
import { HealthReport } from '@/components/health-report';
import { PatientImprovementReview } from '@/components/patient-improvement-review';
import { Consultation } from '@/components/consultation';
import { Payment } from '@/components/payment';
import { ScrollArea } from '@/components/ui/scroll-area';
import type { HealthData } from '@/lib/types';
import { translateText } from '@/ai/flows/translator';
import { initialUiText } from '@/lib/ui-text';
import { useToast } from '@/hooks/use-toast';
import { SectionNavigator } from '@/components/layout/section-navigator';
import {
  Activity,
  BotMessageSquare,
  CreditCard,
  FileText,
  HeartPulse,
  LayoutDashboard,
  MessageSquarePlus,
  Smile,
  User,
  Video,
} from 'lucide-react';

const sectionComponents: { [key: string]: React.ComponentType<any> } = {
  dashboard: Dashboard,
  patientInfo: PatientInformation,
  medicalHistory: MedicalHistory,
  lifestyle: LifestyleAssessment,
  senses: SenseOrgans,
  payment: Payment,
  healthReport: HealthReport,
  aiAnalysis: AiAnalysis,
  patientImprovementReview: PatientImprovementReview,
  consultation: Consultation,
};

const navItems = [
  { id: 'dashboard', icon: LayoutDashboard },
  { id: 'patientInfo', icon: User },
  { id: 'medicalHistory', icon: HeartPulse },
  { id: 'lifestyle', icon: Activity },
  { id: 'senses', icon: Smile },
  { id: 'payment', icon: CreditCard },
  { id: 'healthReport', icon: FileText },
  { id: 'aiAnalysis', icon: BotMessageSquare },
  { id: 'patientImprovementReview', icon: MessageSquarePlus },
  { id: 'consultation', icon: Video },
];

const dataEntrySections = [
    'patientInfo', 
    'medicalHistory', 
    'lifestyle', 
    'senses', 
    'patientImprovementReview'
];

const sectionOrder = navItems.map(item => item.id);

const initialHealthData: HealthData = {
  patientInfo: {
    name: 'Jane Smith',
    age: '42',
    gender: 'female',
    email: 'jane.smith@example.com',
    phone: '+1 (555) 987-6543',
    address: {
      line1: '456 Wellness Ave',
      line2: 'Suite 101',
      city: 'Healthville',
      district: 'Proactive County',
      state: 'State of Balance',
      postalCode: '54321',
    },
    height: '165',
    weight: '68',
    uniqueId: '', // To be generated by user
    avatar: "https://placehold.co/200x200.png",
    dob: '1982-08-15',
    birthTime: '14:30',
    birthPlace: 'Healthville, State of Balance',
    deliveryType: 'normal',
    deliveryTime: 'Full-term',
    occupation: 'Graphic Designer',
    maritalStatus: 'married',
    dateOfVisit: new Date().toISOString().split('T')[0],
    referredBy: 'Dr. Emily White',
  },
  medicalHistory: {
    chiefComplaints: [
      { id: 1, complaint: 'Persistent Headaches', duration: 'Last 3 months', order: 'First' },
      { id: 2, complaint: 'Fatigue and low energy', duration: 'Last 6 months', order: 'Second' },
    ],
    historyOfPresentIllness: {
      symptoms: 'Headaches are typically dull, located behind the eyes, and occur 3-4 times a week. Usually start in the afternoon. Fatigue is constant throughout the day, making it hard to concentrate on work.',
      onset: 'gradual',
      duration: 'intermittent',
      frequencyTiming: 'Headaches in afternoon, fatigue is constant',
      progression: 'worsening',
      location: 'Behind the eyes and at the base of the skull',
      radiation: 'Sometimes radiates to the neck and shoulders',
      character: 'Dull, pressure-like',
      severity: 6,
      associatedSymptoms: 'Occasional dizziness, sensitivity to light during headaches.',
      aggravatingFactors: 'Long hours on the computer, lack of sleep, stress.',
      relievingFactors: 'Resting in a dark room, caffeine.',
      previousEpisodes: 'Had similar but milder headaches during a stressful project last year.',
      impact: 'Affects work productivity and mood.',
    },
    pastHistory: {
      conditions: [
        { id: 1, condition: 'Tonsillectomy', date: '1995-05-10', cured: true },
        { id: 2, condition: 'Gallbladder removal (Laparoscopic cholecystectomy)', date: '2018-11-02', cured: true },
      ],
      trauma: 'Minor car accident in 2010, resulting in whiplash. Fully recovered.',
      bloodTransfusions: 'None',
      allergies: 'Penicillin (causes rash), seasonal pollen (hay fever).',
      immunizations: 'Up-to-date with all adult immunizations, including annual flu shot.',
    },
    medications: {
      prescribed: [
        { id: 1, name: 'Ibuprofen', dosage: '400mg, as needed for headaches', description: 'For pain relief' },
      ],
      supplements: 'Vitamin D (2000 IU/day), Iron (as recommended by previous doctor).',
      compliance: 'good',
      recentChanges: 'Started taking iron supplements 2 months ago.',
    },
    familyHistory: {
      conditions: ['Hypertension', 'Diabetes Type 1/2'],
      familyHealthStatus: 'Mother (68) has hypothyroidism and hypertension. Father (70) has Type 2 Diabetes. One older brother (45) is healthy.',
      consanguinity: 'no',
    },
    documents: {
      reports: null,
      prescriptions: null,
      photos: null,
    },
  },
  lifestyleAssessment: {
    sleep: {
      bedtime: '23:00',
      wakeTime: '07:00',
      quality: 'fair',
      issues: ['Frequent awakening'],
      dreamFrequency: 'sometimes',
      notes: 'Often wake up around 3 AM and find it hard to fall back asleep.',
      photo: null,
    },
    diet: {
      dietType: 'omnivore',
      waterIntake: 2,
      hungerLevel: 6,
      favoriteFood: 'Pasta and salads',
      foodAllergies: 'None known',
      tastes: {
        sweet: true,
        sour: false,
        salty: true,
        bitter: false,
        pungent: false,
        astringent: false,
      },
      thirstLevel: 'normal',
      notes: 'Tries to eat healthy but often gets cravings for salty snacks in the evening.',
      photo: null,
    },
    activity: {
      level: 'lightly',
      notes: 'Goes for a 30-minute walk 2-3 times a week.',
      photo: null,
    },
    stress: {
      level: 'high',
      caffeineIntake: 'moderate',
      primaryEmotion: 'anxious',
      emotionNotes: 'Feeling overwhelmed with work deadlines.',
      notes: 'Feels a lot of pressure from her job.',
      photo: null,
    },
    substance: {
      smokingStatus: 'never',
      alcoholConsumption: 'occasionally',
      notes: 'Has a glass of wine 2-3 times a week to unwind.',
      photo: null,
    },
    stool: {
      color: 'Brown',
      type: '3',
      problems: ['Constipation'],
      notes: 'Sometimes goes 2-3 days without a bowel movement.',
      photo: null,
    },
    urine: {
      color: 'Yellow',
      dayFrequency: 'normal',
      nightFrequency: '0-1',
      problems: [],
      notes: '',
      photo: null,
    },
    menstruation: {
      lastPeriodDate: '2024-06-25',
      cycleLength: 29,
      duration: 4,
      isRegular: 'yes',
      flow: 'medium',
      bloodColor: 'Dark Red',
      symptoms: ['Cramps', 'Bloating'],
      painLevel: 5,
      notes: 'Cramps are usually worse on the first day.',
      photo: null,
    },
  },
  patientImprovementReview: [
    {
        id: 1,
        symptom: 'Lower back pain after starting new exercise routine',
        date: '2024-05-20',
        doctorName: 'Dr. Miller',
        review: 4,
        status: 'relieved',
        recoveryPercentage: 80,
    }
  ],
  consultation: {
    doctors: [
        { id: 1, name: 'Dr. Evelyn Reed', specialization: 'Cardiologist', avatar: 'https://placehold.co/100x100.png' },
        { id: 2, name: 'Dr. Ben Carter', specialization: 'Neurologist', avatar: 'https://placehold.co/100x100.png' },
        { id: 3, name: 'Dr. Olivia Chen', specialization: 'Dermatologist', avatar: 'https://placehold.co/100x100.png' },
    ],
    booking: {
        patientName: 'Jane Smith',
        problem: '',
        report: null,
        uniqueId: '',
        doctorId: null,
    }
  }
};

// Helper function to recursively translate an object's string values
async function translateNestedObject(obj: any, targetLanguage: string): Promise<any> {
  if (typeof obj === 'string') {
    // Don't translate placeholders like {amount}
    if (obj.startsWith('{') && obj.endsWith('}')) {
        return obj;
    }
    const result = await translateText({ text: obj, targetLanguage });
    // The flow now returns an object with a translatedText property
    return result.translatedText;
  }

  if (Array.isArray(obj)) {
    return Promise.all(obj.map(item => translateNestedObject(item, targetLanguage)));
  }

  if (typeof obj === 'object' && obj !== null) {
    const newObj: { [key: string]: any } = {};
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        newObj[key] = await translateNestedObject(obj[key], targetLanguage);
      }
    }
    return newObj;
  }

  return obj; // Return non-string, non-array, non-object values as-is
}


export default function DashboardPage() {
  const [activeSection, setActiveSection] = useState('dashboard');
  const [healthData, setHealthData] = useState<HealthData>(initialHealthData);
  const [uiText, setUiText] = useState(initialUiText);
  const [isTranslating, setIsTranslating] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const { toast } = useToast();

  const handleLanguageChange = async () => {
    const targetLanguage = currentLanguage === 'en' ? 'hi' : 'en';
    const targetLanguageName = currentLanguage === 'en' ? 'Hindi' : 'English';


    if (targetLanguage === 'en') {
      setUiText(initialUiText);
      setCurrentLanguage('en');
      return;
    }

    setIsTranslating(true);
    try {
      const translatedUi = await translateNestedObject(initialUiText, targetLanguageName);
      setUiText(translatedUi);
      setCurrentLanguage('hi');
    } catch (error) {
      console.error("Translation failed", error);
      toast({
        title: "Translation Failed",
        description: "Could not translate the UI. Please try again.",
        variant: "destructive",
      });
      setUiText(initialUiText); // Revert to English on failure
      setCurrentLanguage('en');
    } finally {
      setIsTranslating(false);
    }
  };

  const handleDataChange = (section: keyof HealthData, data: any) => {
    setHealthData(prev => ({
      ...prev,
      [section]: data,
    }));
  };
  
  const ActiveComponent = sectionComponents[activeSection];
  const activeTitle = uiText.sectionTitles[activeSection as keyof typeof uiText.sectionTitles];
  const componentStrings = uiText.components[activeSection as keyof typeof uiText.components];
  
  const showSaveButton = dataEntrySections.includes(activeSection);

  const sidebar = <SidebarNav
    activeSection={activeSection}
    setActiveSection={setActiveSection}
    sectionTitles={uiText.sectionTitles}
    navItems={navItems}
  />;

  const componentProps = {
    data: healthData,
    setData: setHealthData,
    onDataChange: handleDataChange,
    t: componentStrings,
  };

  return (
    <div className="grid min-h-screen w-full md:grid-cols-[220px_1fr] lg:grid-cols-[280px_1fr]">
      <div className="hidden border-r bg-muted/40 md:block">
        {sidebar}
      </div>
      <div className="flex flex-col">
        <Header 
          title={activeTitle} 
          sidebar={sidebar} 
          onLanguageChange={handleLanguageChange} 
          isTranslating={isTranslating} 
          t={uiText.components.header} 
          showSaveButton={showSaveButton}
          currentLanguage={currentLanguage}
        />
        <main className="flex-1 overflow-auto bg-muted/40">
            <ScrollArea className="h-[calc(100vh-65px)]">
                 <div className="p-4 sm:p-6">
                    {ActiveComponent && <ActiveComponent {...componentProps} />}
                    <SectionNavigator
                      activeSection={activeSection}
                      setActiveSection={setActiveSection}
                      sectionOrder={sectionOrder}
                      sectionTitles={uiText.sectionTitles}
                    />
                 </div>
            </ScrollArea>
        </main>
      </div>
      <ChatBot t={uiText.components.chatbot} />
    </div>
  );
}
